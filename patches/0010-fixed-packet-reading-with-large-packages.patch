From 4a11c9b1d36ca013e53b6497172653134bdcbcc2 Mon Sep 17 00:00:00 2001
From: Yehonal <yehonal.azeroth@gmail.com>
Date: Thu, 22 Dec 2016 09:15:36 +0100
Subject: [PATCH 10/26] fixed packet reading with large packages

---
 src/lib/game/handler.js | 14 ++++++++++++--
 src/lib/game/packet.js  | 18 +++++++++++++++---
 2 files changed, 27 insertions(+), 5 deletions(-)

diff --git a/src/lib/game/handler.js b/src/lib/game/handler.js
index b22e52d..45915c9 100644
--- a/src/lib/game/handler.js
+++ b/src/lib/game/handler.js
@@ -76,6 +76,8 @@ class GameHandler extends Socket {
         return;
       }
 
+      var isLarge = false;
+
       if (this.remaining === false) {
 
         if (this.buffer.available < GamePacket.HEADER_SIZE_INCOMING) {
@@ -87,12 +89,20 @@ class GameHandler extends Socket {
           this._crypt.decrypt(new Uint8Array(this.buffer.buffer, this.buffer.index, GamePacket.HEADER_SIZE_INCOMING));
         }
 
-        this.remaining = this.buffer.readUnsignedShort(ByteBuffer.BIG_ENDIAN);
+        var firstByte=this.buffer.raw[this.buffer.index];
+        isLarge = firstByte & GamePacket.LARGE_PACKET_FLAG;
+
+        if (isLarge) {
+          this._crypt.decrypt(new Uint8Array(this.buffer.buffer, this.buffer.index +  GamePacket.HEADER_SIZE_INCOMING, 1));
+          this.remaining = this.buffer.readUnsignedByte(ByteBuffer.BIG_ENDIAN) | this.buffer.readUnsignedShort(ByteBuffer.BIG_ENDIAN);
+        } else {
+          this.remaining = this.buffer.readUnsignedShort(ByteBuffer.BIG_ENDIAN);
+        }
       }
 
       if (this.remaining > 0 && this.buffer.available >= this.remaining) {
         const size = GamePacket.OPCODE_SIZE_INCOMING + this.remaining;
-        const gp = new GamePacket(this.buffer.readUnsignedShort(), this.buffer.seek(-GamePacket.HEADER_SIZE_INCOMING).read(size), false);
+        const gp = new GamePacket(this.buffer.readUnsignedShort(), this.buffer.seek(-GamePacket.HEADER_SIZE_INCOMING).read(size), false , isLarge);
 
         this.remaining = false;
 
diff --git a/src/lib/game/packet.js b/src/lib/game/packet.js
index 6f51707..25280ed 100644
--- a/src/lib/game/packet.js
+++ b/src/lib/game/packet.js
@@ -6,6 +6,7 @@ import ObjectUtil from '../utils/object-util';
 class GamePacket extends BasePacket {
 
   // Header sizes in bytes for both incoming and outgoing packets
+  static HEADER_LARGE_SIZE_INCOMING = 5;
   static HEADER_SIZE_INCOMING = 4;
   static HEADER_SIZE_OUTGOING = 6;
 
@@ -13,11 +14,21 @@ class GamePacket extends BasePacket {
   static OPCODE_SIZE_INCOMING = 2;
   static OPCODE_SIZE_OUTGOING = 4;
 
-  constructor(opcode, source, outgoing = true) {
+  static LARGE_PACKET_FLAG = 0x80;
+
+  constructor(opcode, source, outgoing = true, isLarge = false) {
     if (!source) {
-      source = (outgoing) ? GamePacket.HEADER_SIZE_OUTGOING : GamePacket.HEADER_SIZE_INCOMING;
+      if (outgoing === true) {
+        source = GamePacket.HEADER_SIZE_OUTGOING
+      } else {
+        source = (isLarge === true ? GamePacket.HEADER_LARGE_SIZE_INCOMING : GamePacket.HEADER_SIZE_INCOMING);
+      }
     }
+
     super(opcode, source, outgoing);
+
+    // is it a large package ?
+    this.isLarge = isLarge;
   }
 
   // Retrieves the name of the opcode for this packet (if available)
@@ -30,7 +41,8 @@ class GamePacket extends BasePacket {
     if (this.outgoing) {
       return this.constructor.HEADER_SIZE_OUTGOING;
     }
-    return this.constructor.HEADER_SIZE_INCOMING;
+
+    return this.isLarge === true ? GamePacket.HEADER_LARGE_SIZE_INCOMING : GamePacket.HEADER_SIZE_INCOMING;
   }
 
   // Reads GUID from this packet
-- 
2.43.0

