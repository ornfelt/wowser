From 2af0fb1d38230121a993fe9107c0910984cbd89c Mon Sep 17 00:00:00 2001
From: Yehonal <yehonal.azeroth@gmail.com>
Date: Fri, 23 Dec 2016 01:22:12 +0100
Subject: [PATCH 17/26] implemented wisp and done lots of fixes

---
 src/components/game/chat/index.jsx  | 206 ++++++++++++++++++++++------
 src/components/game/chat/index.styl |  11 ++
 src/components/wowser/index.styl    |   3 +
 src/lib/auth/handler.js             |  12 +-
 src/lib/game/chat/chatEnum.js       |   1 -
 src/lib/game/chat/handler.js        |  42 ++++--
 src/lib/game/chat/langEnum.js       |  24 ++++
 src/lib/game/handler.js             |  17 ++-
 src/lib/game/packet.js              |  21 +++
 9 files changed, 271 insertions(+), 66 deletions(-)
 create mode 100644 src/lib/game/chat/langEnum.js

diff --git a/src/components/game/chat/index.jsx b/src/components/game/chat/index.jsx
index fabdefa..0943ee5 100644
--- a/src/components/game/chat/index.jsx
+++ b/src/components/game/chat/index.jsx
@@ -2,7 +2,6 @@ import React from 'react';
 import classes from 'classnames';
 import { Tab, Tabs, TabList, TabPanel } from 'react-tabs';
 import ChatEnum from '../../../lib/game/chat/chatEnum';
-
 import './index.styl';
 
 import session from '../../wowser/session';
@@ -13,11 +12,15 @@ class ChatPanel extends React.Component {
     super();
 
     this.state = {
+      selectedIndex : 0,
       playerNames : session.chat.playerNames,
       sayText: '',
+      wispText: '',
       guildText: '',
       worldText: '',
+      wispDest: null,
       sayMessages: session.chat.sayMessages,
+      wispMessages: session.chat.wispMessages,
       guildMessages: session.chat.guildMessages,
       worldMessages: session.chat.worldMessages,
       logsMessages: session.chat.logsMessages
@@ -32,9 +35,16 @@ class ChatPanel extends React.Component {
     this._onChangeWorld = ::this._onChangeWorld;
     this._onMessageWorld = ::this._onMessageWorld;
     this._onSubmitWorld = ::this._onSubmitWorld;
+    this._onChangeWisp = ::this._onChangeWisp;
+    this._onChangeWispDest = ::this._onChangeWispDest;
+    this._onMessageWisp = ::this._onMessageWisp;
+    this._onSubmitWisp = ::this._onSubmitWisp;
+    this._setWispDest  = ::this._setWispDest;
     this._onMessageLogs = ::this._onMessageLogs;
+    this._selTab = ::this._selTab;
+    this._onMessageDispatch = ::this._onMessageDispatch;
 
-    session.chat.on('message', this._onMessageSay);
+    session.chat.on('message', this._onMessageDispatch);
   }
 
   componentDidUpdate() {
@@ -44,17 +54,44 @@ class ChatPanel extends React.Component {
       document.getElementById("worldMessages").scrollTop   = document.getElementById("worldMessages").scrollHeight;
     else if (document.getElementById("guildMessages"))
       document.getElementById("guildMessages").scrollTop   = document.getElementById("guildMessages").scrollHeight;
+    else if (document.getElementById("wispMessages"))
+      document.getElementById("wispMessages").scrollTop   = document.getElementById("wispMessages").scrollHeight;
     else if (document.getElementById("logsMessages"))
-      document.getElementById("logsMessages").scrollTop   = document.getElementById("guildMessages").scrollHeight;
+      document.getElementById("logsMessages").scrollTop   = document.getElementById("logsMessages").scrollHeight;
   }
 
-  forceScroll() {
-    if (document.getElementById("sayMessages"))
-      document.getElementById("sayMessages").scrollTop   = document.getElementById("sayMessages").scrollHeight;
-    if (document.getElementById("worldMessages"))
-      document.getElementById("worldMessages").scrollTop   = document.getElementById("worldMessages").scrollHeight;
-    if (document.getElementById("guildMessages"))
-      document.getElementById("guildMessages").scrollTop   = document.getElementById("guildMessages").scrollHeight;
+  _selTab(e) {
+    this.setState({selectedIndex : e });
+    session.chat.emit("message",null); // workaround to keep chat box at bottom
+  }
+
+  _onMessageDispatch(message, type) {
+      switch(type) {
+        case ChatEnum.CHAT_MSG_CHANNEL:
+            this._onMessageWorld();
+            document.getElementById("react-tabs-0").setAttribute("aria-selected", "true");
+        break;
+        case ChatEnum.CHAT_MSG_GUILD:
+            this._onMessageGuild();
+            document.getElementById("react-tabs-2").setAttribute("aria-selected", "true");
+        break;
+        case ChatEnum.CHAT_MSG_WHISPER:
+        case ChatEnum.CHAT_MSG_WHISPER_INFORM:
+        case ChatEnum.CHAT_MSG_WHISPER_FOREIGN:
+            this._onMessageWisp();
+            document.getElementById("react-tabs-4").setAttribute("aria-selected", "true");
+        break;
+        case ChatEnum.CHAT_MSG_SAY:
+        case ChatEnum.CHAT_MSG_SYSTEM:
+        case ChatEnum.CHAT_MSG_EMOTE:
+        case ChatEnum.CHAT_MSG_YELL:
+            this._onMessageSay();
+            document.getElementById("react-tabs-6").setAttribute("aria-selected", "true");
+        break;
+        default:
+            this._onMessageLogs();
+        break;
+    }
   }
 
 /*
@@ -134,6 +171,53 @@ class ChatPanel extends React.Component {
     }
   }
 
+  /**
+   *  WISP
+   */
+  sendWisp(text) {
+    const message = session.chat.create();
+    message.text = text;
+    session.chat.send(text, ChatEnum.CHAT_MSG_WHISPER, this.state.wispDest);
+  }
+
+  _onChangeWisp(event) {
+    this.setState({ wispText: event.target.value });
+  }
+
+  _onChangeWispDest(event) {
+    this.setState({ wispDest: event.target.value });
+  }
+
+  _onMessageWisp() {
+    this.setState({ wispMessages: session.chat.wispMessages });
+  }
+
+  _setWispDest(e) {
+    e.preventDefault();
+    var guid=e.target.parentElement.classList[0];
+    guid = parseInt(guid);
+    
+    if (guid>0) {
+      var name = this.state.playerNames[guid].name;
+      var nome = "Gnoma";
+
+      var equal=name.length == nome.length;
+
+      this.setState({
+        wispDest : (' ' + name).slice(1),
+        selectedIndex : 2
+      });
+    }
+  }
+
+  _onSubmitWisp(event) {
+    event.preventDefault();
+    if (this.state.wispText) {
+      this.sendWisp(this.state.wispText);
+      this.setState({ wispText: '' });
+    }
+  }
+
   /*
     LOGS
    */
@@ -151,33 +235,36 @@ class ChatPanel extends React.Component {
     return (
         <chat className="chat frame" ref="chat">
             <Tabs
-                onSelect={this.forceScroll}
+                selectedIndex={this.state.selectedIndex}
+                onSelect={this._selTab}
               >
                 <TabList>
-                  <Tab>Say</Tab>
-                  <Tab>Guild</Tab>
                   <Tab>World</Tab>
+                  <Tab>Guild</Tab>
+                  <Tab>Wisp</Tab>
+                  <Tab>Say in area</Tab>
                   <Tab>Logs</Tab>
                 </TabList>
                 <TabPanel>
-                      <ul id="sayMessages" className="chat-box">
+                      <ul id="worldMessages" className="chat-box">
                         <li>- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</li>
-                        { this.state.sayMessages.map((message, index) => {
+                        { this.state.worldMessages.map((message, index) => {
                           const className = classes('message', message.kind);
                           return (
-                            <li className={ className } key={ index }>
-                              <span class="time">[{this._getTime(message.timestamp)}] </span>
-                              <span class="flags">{this.state.playerNames[message.guid1] && this.state.playerNames[message.guid1].isGm ? "[GM]" : ""}</span>
-                              <span class="{message.guid1}">[{this.state.playerNames[message.guid1] ? this.state.playerNames[message.guid1].name : message.guid1}] </span>
-                              {message.kind === "whisper incoming" ? "whispers" : "Says"}: { message.text }
+                            <li className="message.guid" className={ className } key={ index }>
+                              <span className="time">[{this._getTime(message.timestamp)}] </span>
+                              <span className="type">[World]</span>
+                              <span className="flags">{this.state.playerNames[message.guid1] && this.state.playerNames[message.guid1].isGm ? "[GM]" : ""}</span>
+                              <a style={{cursor: 'pointer'}} className={ message.guid1 } onClick={ this._setWispDest }>[{this.state.playerNames[message.guid1] ? this.state.playerNames[message.guid1].name : message.guid1}] </a>
+                              : { message.text }
                             </li>
                           );
                         }) }
                       </ul>
 
-                      <form onSubmit={ this._onSubmitSay }>
-                        <input type="text" onChange={ this._onChangeSay }
-                               name="text" value={ this.state.sayText } />
+                      <form onSubmit={ this._onSubmitWorld }>
+                        <input type="text" onChange={ this._onChangeWorld }
+                               name="text" value={ this.state.worldText } />
                       </form>
                 </TabPanel>
                 <TabPanel>
@@ -187,10 +274,10 @@ class ChatPanel extends React.Component {
                           const className = classes('message', message.kind);
                           return (
                             <li className={ className } key={ index }>
-                              <span class="time">[{this._getTime(message.timestamp)}] </span>
-                              <span class="type">[Guild]</span>
-                              <span class="flags">{this.state.playerNames[message.guid1] && this.state.playerNames[message.guid1].isGm ? "[GM]" : ""}</span>
-                              <span class="{message.guid1}">[{this.state.playerNames[message.guid1] ? this.state.playerNames[message.guid1].name : message.guid1}] </span>
+                              <span className="time">[{this._getTime(message.timestamp)}] </span>
+                              <span className="type">[Guild]</span>
+                              <span className="flags">{this.state.playerNames[message.guid1] && this.state.playerNames[message.guid1].isGm ? "[GM]" : ""}</span>
+                              <a style={{cursor: 'pointer'}} className={ message.guid1 } onClick={ this._setWispDest }>[{this.state.playerNames[message.guid1] ? this.state.playerNames[message.guid1].name : message.guid1}] </a>
                               : { message.text }
                             </li>
                           );
@@ -203,25 +290,58 @@ class ChatPanel extends React.Component {
                       </form>
                 </TabPanel>
                 <TabPanel>
-                      <ul id="worldMessages" className="chat-box">
+                      <ul id="wispMessages" className="chat-box">
                         <li>- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</li>
-                        { this.state.worldMessages.map((message, index) => {
+                        { this.state.wispMessages.map((message, index) => {
                           const className = classes('message', message.kind);
                           return (
-                            <li class="message.guid" className={ className } key={ index }>
-                              <span class="time">[{this._getTime(message.timestamp)}] </span>
-                              <span class="type">[World]</span>
-                              <span class="flags">{this.state.playerNames[message.guid1] && this.state.playerNames[message.guid1].isGm ? "[GM]" : ""}</span>
-                              <span class="{message.guid1}">[{this.state.playerNames[message.guid1] ? this.state.playerNames[message.guid1].name : message.guid1}] </span>
-                              : { message.text }
+                            <li className={ className } key={ index }>
+                              <span className="time">[{this._getTime(message.timestamp)}] </span>
+                              <span className="flags">{this.state.playerNames[message.guid1] && this.state.playerNames[message.guid1].isGm ? "[GM]" : ""}</span>
+                              {message.kind === "whisper incoming" ? "" : "To "}
+                              <a style={{cursor: 'pointer'}} className={ message.guid1 } onClick={ this._setWispDest }>[{this.state.playerNames[message.guid1] ? this.state.playerNames[message.guid1].name : message.guid1}] </a>
+                              {message.kind === "whisper incoming" ? "whispers" : ""}: { message.text }
                             </li>
                           );
                         }) }
                       </ul>
 
-                      <form onSubmit={ this._onSubmitWorld }>
-                        <input type="text" onChange={ this._onChangeWorld }
-                               name="text" value={ this.state.worldText } />
+                      <form onSubmit={ this._onSubmitWisp } className="message whisper outgoing">
+                        <div className="wisp-form">
+                            <div className="wisp-to">
+                              <span>
+                                <input className="wisp-dest" type="text" onChange={ this._onChangeWispDest } name="name" value={ this.state.wispDest } placeholder="To:" />
+                              </span>
+                            </div>
+                            <div className="wisp-input">
+                              <input className="wisp-input" type="text" onChange={ this._onChangeWisp }
+                                name="text" value={ this.state.wispText } />
+                            </div>
+                            <div style={{display: 'table-cell'}}>
+                              <button className="send" type='submit'>></button>
+                            </div>
+                        </div>
+                      </form>
+                </TabPanel>
+                <TabPanel>
+                      <ul id="sayMessages" className="chat-box">
+                        <li>- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</li>
+                        { this.state.sayMessages.map((message, index) => {
+                          const className = classes('message', message.kind);
+                          return (
+                            <li className={ className } key={ index }>
+                              <span className="time">[{this._getTime(message.timestamp)}] </span>
+                              <span className="flags">{this.state.playerNames[message.guid1] && this.state.playerNames[message.guid1].isGm ? "[GM]" : ""}</span>
+                              <a style={{cursor: 'pointer'}} className={ message.guid1 } onClick={ this._setWispDest }>[{this.state.playerNames[message.guid1] ? this.state.playerNames[message.guid1].name : message.guid1}] </a>
+                              Says: { message.text }
+                            </li>
+                          );
+                        }) }
+                      </ul>
+
+                      <form onSubmit={ this._onSubmitSay }>
+                        <input type="text" onChange={ this._onChangeSay }
+                               name="text" value={ this.state.sayText } />
                       </form>
                 </TabPanel>
                 <TabPanel>
@@ -230,11 +350,11 @@ class ChatPanel extends React.Component {
                         { this.state.logsMessages.map((message, index) => {
                           const className = classes('message', message.kind);
                           return (
-                            <li class="message.guid" className={ className } key={ index }>
-                              <span class="time">[{this._getTime(message.timestamp)}] </span>
-                              <span class="type">[World]</span>
-                              <span class="flags">{this.state.playerNames[message.guid1] && this.state.playerNames[message.guid1].isGm ? "[GM]" : ""}</span>
-                              <span class="{message.guid1}">[{this.state.playerNames[message.guid1] ? this.state.playerNames[message.guid1].name : message.guid1}] </span>
+                            <li className="message.guid" className={ className } key={ index }>
+                              <span className="time">[{this._getTime(message.timestamp)}] </span>
+                              <span className="type">[Logs]</span>
+                              <span className="flags">{this.state.playerNames[message.guid1] && this.state.playerNames[message.guid1].isGm ? "[GM]" : ""}</span>
+                              <a style={{cursor: 'pointer'}} className={ message.guid1 } onClick={ this._setWispDest }>[{this.state.playerNames[message.guid1] ? this.state.playerNames[message.guid1].name : message.guid1}] </a>
                               : { message.text }
                             </li>
                           );
diff --git a/src/components/game/chat/index.styl b/src/components/game/chat/index.styl
index 129a9ea..9cf5c01 100644
--- a/src/components/game/chat/index.styl
+++ b/src/components/game/chat/index.styl
@@ -54,6 +54,17 @@ wowser .chat
 
     input
       width: 100%
+    
+    .wisp-form
+      width:   100%
+      display: table
+      
+      .wisp-to
+        display: table-cell
+        width:80px;
+      
+      .wisp-input
+        display: table-cell
 
   .ReactTabs__TabList
     height: auto;
diff --git a/src/components/wowser/index.styl b/src/components/wowser/index.styl
index 9d9349e..540fe57 100644
--- a/src/components/wowser/index.styl
+++ b/src/components/wowser/index.styl
@@ -17,6 +17,9 @@ wowser
   width: 100%
   height: 100%
   background: #222222
+  background: url('http://app.drassil.net/data/images/background3.jpg') no-repeat;
+  background-position: center;
+  background-size: cover;
   font-family: Galdeano
   font-size: 13px
   color: #FFFFFF
diff --git a/src/lib/auth/handler.js b/src/lib/auth/handler.js
index e050994..fc02500 100644
--- a/src/lib/auth/handler.js
+++ b/src/lib/auth/handler.js
@@ -145,6 +145,7 @@ class AuthHandler extends Socket {
         break;
       case AuthChallengeOpcode.ACCOUNT_INVALID:
         console.warn('account invalid');
+        alert("Invalid Account!");
         this.emit('reject');
         break;
       case AuthChallengeOpcode.BUILD_INVALID:
@@ -162,11 +163,18 @@ class AuthHandler extends Socket {
 
     console.info('received proof response');
 
-    const M2 = ap.read(20);
+    var M2;
 
-    if (this.srp.validate(M2)) {
+    try {
+      M2 = ap.read(20);
+    } catch (e) {
+      // reject
+    }
+
+    if (M2 && this.srp.validate(M2)) {
       this.emit('authenticate');
     } else {
+      alert("Invalid account!");
       this.emit('reject');
     }
   }
diff --git a/src/lib/game/chat/chatEnum.js b/src/lib/game/chat/chatEnum.js
index ef4c4f4..89ea235 100644
--- a/src/lib/game/chat/chatEnum.js
+++ b/src/lib/game/chat/chatEnum.js
@@ -1,4 +1,3 @@
-
 class ChatEnum {
     static channel = "world"; // hacky workaround
     static CHAT_MSG_ADDON                  = 0xFFFFFFFF;
diff --git a/src/lib/game/chat/handler.js b/src/lib/game/chat/handler.js
index 47d8019..c516a41 100644
--- a/src/lib/game/chat/handler.js
+++ b/src/lib/game/chat/handler.js
@@ -4,6 +4,7 @@ import Message from './message';
 import GamePacket from '../packet';
 import GameOpcode from '../opcode';
 import ChatEnum from './chatEnum';
+import Language from './langEnum';
 
 class ChatHandler extends EventEmitter {
 
@@ -25,19 +26,24 @@ class ChatHandler extends EventEmitter {
         new Message('info', 'This is an info message',0),
         new Message('error', 'This is an error message',0),
         new Message('area', 'Player: This is a message emitted nearby',0),
-        new Message('whisper outgoing', 'To Someone: This is an outgoing whisper',0),
-        new Message('whisper incoming', 'Someone: This is an incoming whisper',0)
     ];
 
     this.guildMessages = [
         welcome,
         new Message('guild', '[Guild] Someone: This is your guild channel (if you have a guild)',0)
     ];
+
     this.worldMessages = [
         welcome,
         new Message('channel', '[World]: This is the official world channel',0),
     ]
 
+    this.wispMessages = [
+        welcome,
+        new Message('whisper outgoing', 'To [Someone]: This is an outgoing whisper',0),
+        new Message('whisper incoming', 'wispers: This is an incoming whisper',0),
+    ]
+
     this.logsMessages = [
         welcome,
         new Message('info', '[Logs]: This is a log window',0),
@@ -55,7 +61,7 @@ class ChatHandler extends EventEmitter {
   }
 
   // Sends given message
-  send(_message,type) {
+  send(_message,type, dest) {
     var size=64+_message.length;
 
     var channel = ChatEnum.channel+"\0";
@@ -79,6 +85,10 @@ class ChatHandler extends EventEmitter {
               app.writeString(channel);
               app.writeString(_message);
         break;
+        case ChatEnum.CHAT_MSG_WHISPER:
+              app.writeString(dest+"\0");
+              app.writeString(_message);
+        break;
     }
 
     this.session.game.send(app);
@@ -98,11 +108,13 @@ class ChatHandler extends EventEmitter {
   handleMessage(gp,isGm) {
     var guid2 = 0;
 
-    const type = gp.readUnsignedByte(); // type
+    var type = gp.readUnsignedByte(); // type
     const lang = gp.readUnsignedInt(); // language
     const guid1 = gp.readGUID();
     const unk1 = gp.readUnsignedInt();
 
+    var isAddon = lang == Language.LANG_ADDON;
+
     if (isGm === true)
     {
         var nameLen =  gp.readUnsignedInt();
@@ -136,8 +148,7 @@ class ChatHandler extends EventEmitter {
           return;
 
         var _unk=gp.readUnsignedInt();
-        len = gp.length - gp.index - 1; // channel buffer min size
-        text = gp.readString(len);
+        text = gp.readCString();
       break;
       case ChatEnum.CHAT_MSG_WHISPER_FOREIGN:
         len = gp.readUnsignedInt();
@@ -169,6 +180,10 @@ class ChatHandler extends EventEmitter {
 
     var chatLimit=300;
 
+    if (isAddon) {
+        type = ChatEnum.CHAT_MSG_ADDON;
+    }
+
     switch(type) {
         case ChatEnum.CHAT_MSG_SAY:
             message = new Message("area", text, guid1.low);
@@ -202,13 +217,18 @@ class ChatHandler extends EventEmitter {
         break;
         case ChatEnum.CHAT_MSG_WHISPER:
             message = new Message("whisper incoming", text, guid1.low, guid2.low);
-            this.sayMessages.push(message);
-            this.sayMessages.length > chatLimit && this.sayMessages.shift();
+            this.wispMessages.push(message);
+            this.wispMessages.length > chatLimit && this.wispMessages.shift();
+        break;
+        case ChatEnum.CHAT_MSG_WHISPER_INFORM:
+            message = new Message("whisper outgoing", text, guid1.low, guid2.low);
+            this.wispMessages.push(message);
+            this.wispMessages.length > chatLimit && this.wispMessages.shift();
         break;
         case ChatEnum.CHAT_MSG_WHISPER_FOREIGN:
             message = new Message("whisper incoming", text, senderName, recvGuid.low);
-            this.sayMessages.push(message);
-            this.sayMessages.length > chatLimit && this.sayMessages.shift();
+            this.wispMessages.push(message);
+            this.wispMessages.length > chatLimit && this.wispMessages.shift();
         break;
         default:
             message = new Message("info", text, guid1.low);
@@ -217,7 +237,7 @@ class ChatHandler extends EventEmitter {
         break;
     }
 
-    this.emit('message', message);
+    this.emit('message', message, type);
   }
 
 }
diff --git a/src/lib/game/chat/langEnum.js b/src/lib/game/chat/langEnum.js
new file mode 100644
index 0000000..6ac5646
--- /dev/null
+++ b/src/lib/game/chat/langEnum.js
@@ -0,0 +1,24 @@
+class Language
+{
+    static LANG_UNIVERSAL      = 0;
+    static LANG_ORCISH         = 1;
+    static LANG_DARNASSIAN     = 2;
+    static LANG_TAURAHE        = 3;
+    static LANG_DWARVISH       = 6;
+    static LANG_COMMON         = 7;
+    static LANG_DEMONIC        = 8;
+    static LANG_TITAN          = 9;
+    static LANG_THALASSIAN     = 10;
+    static LANG_DRACONIC       = 11;
+    static LANG_KALIMAG        = 12;
+    static LANG_GNOMISH        = 13;
+    static LANG_TROLL          = 14;
+    static LANG_GUTTERSPEAK    = 33;
+    static LANG_DRAENEI        = 35;
+    static LANG_ZOMBIE         = 36;
+    static LANG_GNOMISH_BINARY = 37;
+    static LANG_GOBLIN_BINARY  = 38;
+    static LANG_ADDON          = 0xFFFFFFFF;                        // used by addons, in 2.4.0 not exist, replaced by messagetype?
+};
+
+export default Language;
\ No newline at end of file
diff --git a/src/lib/game/handler.js b/src/lib/game/handler.js
index 5eba5fd..8474b39 100644
--- a/src/lib/game/handler.js
+++ b/src/lib/game/handler.js
@@ -72,6 +72,10 @@ class GameHandler extends Socket {
     this.session.player.name = character.name;
     this.session.player.guid = character.guid;
 
+    this.playerNames[character.guid.low] = {
+      name : character.name
+    }
+
     if (character) {
       console.info('joining game with', character.toString());
 
@@ -136,20 +140,15 @@ class GameHandler extends Socket {
   }
 
   handleName(gp) {
-    const unk = gp.readUnsignedByte();
-    const guid = unk > 1 ? gp.readUnsignedInt() : gp.readUnsignedByte(); // strange behaviour 
-    //const name_known = gp.readUnsignedByte();
-    const name = gp.readString();
+    const guid = gp.readPackedGUID();
+    const name_known = gp.readUnsignedByte();
+    const name = gp.readCString();
+    const realm = gp.readCString(); // only for crossrealm
 
-    
-    // the buffer is empty now o_O
-    /*
-    const realm_name = gp.readUnsignedByte(); // only for crossrealm
     const race = gp.readUnsignedByte();
     const gender = gp.readUnsignedByte(); // guid2
     const playerClass = gp.readUnsignedByte();
     const declined = gp.readUnsignedByte();
-    */
 
     this.session.player.name=name;
     
diff --git a/src/lib/game/packet.js b/src/lib/game/packet.js
index 25280ed..9820c59 100644
--- a/src/lib/game/packet.js
+++ b/src/lib/game/packet.js
@@ -61,6 +61,27 @@ class GamePacket extends BasePacket {
   // readPackedGUID: ->
   //   return null
 
+  readPackedGUID() {
+      var guidMark = this.readUnsignedByte();
+
+      var guid = 0;
+
+      var i;
+      for (i = 0; i < 8; ++i)
+      {
+          if(guidMark & (1 << i))
+          {
+              if(this.index + 1 > this.length) 
+                  throw "Buffer exception "+this.index+" >= "+this.lenght;
+
+              var bit = this.readUnsignedByte();
+              guid |= (bit << (i * 8));
+          }
+      }
+
+      return guid;
+  }
+
   // // Writes given GUID to this packet in packed form
   // // TODO: Implementation
   // writePackedGUID: (guid) ->
-- 
2.43.0

