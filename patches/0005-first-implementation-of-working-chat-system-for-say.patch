From a86e31a616b64720e1926cfa707c7a6db43e3cec Mon Sep 17 00:00:00 2001
From: Yehonal <yehonal.azeroth@gmail.com>
Date: Tue, 20 Dec 2016 20:34:09 +0100
Subject: [PATCH 05/26] first implementation of working chat system for <say>

---
 src/components/game/chat/index.jsx  | 192 +++++++++++++++++++++++-----
 src/components/game/chat/index.styl |   4 +
 src/lib/game/chat/handler.js        | 139 +++++++++++++++++---
 src/lib/game/chat/message.js        |   6 +-
 src/lib/game/opcode.js              |   3 +
 5 files changed, 289 insertions(+), 55 deletions(-)

diff --git a/src/components/game/chat/index.jsx b/src/components/game/chat/index.jsx
index 9e93ed5..a9b221a 100644
--- a/src/components/game/chat/index.jsx
+++ b/src/components/game/chat/index.jsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import classes from 'classnames';
+import { Tab, Tabs, TabList, TabPanel } from 'react-tabs';
 
 import './index.styl';
 
@@ -11,62 +12,185 @@ class ChatPanel extends React.Component {
     super();
 
     this.state = {
-      text: '',
-      messages: session.chat.messages
+      playerNames : session.chat.playerNames,
+      sayText: '',
+      guildText: '',
+      worldText: '',
+      sayMessages: session.chat.sayMessages,
+      guildMessages: [],
+      worldMessages: []
     };
 
-    this._onChange = ::this._onChange;
-    this._onMessage = ::this._onMessage;
-    this._onSubmit = ::this._onSubmit;
-
-    session.chat.on('message', this._onMessage);
+    this._onChangeSay = ::this._onChangeSay;
+    this._onMessageSay = ::this._onMessageSay;
+    this._onSubmitSay = ::this._onSubmitSay;
+    this._onChangeGuild = ::this._onChangeGuild;
+    this._onMessageGuild = ::this._onMessageGuild;
+    this._onSubmitGuild = ::this._onSubmitGuild;
+    this._onChangeWorld = ::this._onChangeWorld;
+    this._onMessageWorld = ::this._onMessageGuild;
+    this._onSubmitWorld = ::this._onSubmitGuild;
+
+    session.chat.on('message', this._onMessageSay);
   }
 
   componentDidUpdate() {
-    this.refs.messages.scrollTop = this.refs.messages.scrollHeight;
+    if (document.getElementById("sayMessages"))
+      document.getElementById("sayMessages").scrollTop   = document.getElementById("sayMessages").scrollHeight;
+    else if (document.getElementById("worldMessages"))
+      document.getElementById("worldMessages").scrollTop   = document.getElementById("worldMessages").scrollHeight;
+    else if (document.getElementById("guildMessages"))
+      document.getElementById("guildMessages").scrollTop   = document.getElementById("guildMessages").scrollHeight;
+  }
+
+/*
+ * SAY
+ */
+
+  sendSay(text) {
+    const message = session.chat.create();
+    message.text = text;
+    session.chat.send(text);
   }
 
-  send(text) {
+  _onChangeSay(event) {
+    this.setState({ sayText: event.target.value });
+  }
+
+  _onMessageSay() {
+    this.setState({ sayMessages: session.chat.sayMessages });
+  }
+
+  _onSubmitSay(event) {
+    event.preventDefault();
+    if (this.state.sayText) {
+      this.sendSay(this.state.sayText);
+      this.setState({ sayText: '' });
+    }
+  }
+  
+  /*
+   * GUILD
+   */
+  
+  sendGuild(text) {
     const message = session.chat.create();
     message.text = text;
     session.chat.send(text);
   }
 
-  _onChange(event) {
-    this.setState({ text: event.target.value });
+  _onChangeGuild(event) {
+    this.setState({ guildText: event.target.value });
   }
 
-  _onMessage() {
-    this.setState({ messages: session.chat.messages });
+  _onMessageGuild() {
+    this.setState({ guildMessages: session.chat.guildMessages });
   }
 
-  _onSubmit(event) {
+  _onSubmitGuild(event) {
     event.preventDefault();
-    if (this.state.text) {
-      this.send(this.state.text);
-      this.setState({ text: '' });
+    if (this.state.guildText) {
+      this.sendGuild(this.state.guildText);
+      this.setState({ guildText: '' });
     }
   }
+  
+  /**
+   *  WORLD
+   */
+  sendWorld(text) {
+    const message = session.chat.create();
+    message.text = text;
+    session.chat.send(text);
+  }
+
+  _onChangeWorld(event) {
+    this.setState({ worldText: event.target.value });
+  }
+
+  _onMessageWorld() {
+    this.setState({ worldMessages: session.chat.worldMessages });
+  }
+
+  _onSubmitWorld(event) {
+    event.preventDefault();
+    if (this.state.worldText) {
+      this.sendWorld(this.state.worldText);
+      this.setState({ worldText: '' });
+    }
+  }
+  
+  _getTime(local) {
+      return local.getHours() + ":" + local.getMinutes() + ":" + local.getSeconds();
+  }
 
   render() {
     return (
-      <chat className="chat frame">
-        <ul ref="messages">
-          { this.state.messages.map((message, index) => {
-            const className = classes('message', message.kind);
-            return (
-              <li className={ className } key={ index }>
-                { message.text }
-              </li>
-            );
-          }) }
-        </ul>
-
-        <form onSubmit={ this._onSubmit }>
-          <input type="text" onChange={ this._onChange }
-                 name="text" value={ this.state.text } />
-        </form>
-      </chat>
+        <chat className="chat frame" ref="chat">
+            <Tabs
+                onSelect={this.handleSelect}
+                selectedIndex={0}
+              >
+                <TabList>
+                  <Tab>Say</Tab>
+                  <Tab>Guild</Tab>
+                  <Tab>World</Tab>
+                </TabList>
+                <TabPanel>
+                      <ul id="sayMessages">
+                        { this.state.sayMessages.map((message, index) => {
+                          const className = classes('message', message.kind);
+                          return (
+                            <li className={ className } key={ index }>
+                                <span class="time">[{this._getTime(message.timestamp)}] </span>
+                                <span class="{message.guid1}">[{this.state.playerNames[message.guid1] ? this.state.playerNames[message.guid1].name : message.guid1}] </span>
+                                Says: { message.text }
+                            </li>
+                          );
+                        }) }
+                      </ul>
+
+                      <form onSubmit={ this._onSubmitSay }>
+                        <input type="text" onChange={ this._onChangeSay }
+                               name="text" value={ this.state.sayText } />
+                      </form>
+                </TabPanel>
+                <TabPanel>
+                      <ul ref="guildMessages">
+                        { this.state.guildMessages.map((message, index) => {
+                          const className = classes('message', message.kind);
+                          return (
+                            <li className={ className } key={ index }>
+                              { message.text }
+                            </li>
+                          );
+                        }) }
+                      </ul>
+
+                      <form onSubmit={ this._onSubmitGuild }>
+                        <input type="text" onChange={ this._onChangeGuild }
+                               name="text" value={ this.state.guildText } />
+                      </form>
+                </TabPanel>
+                <TabPanel>
+                      <ul id="worldMessages">
+                        { this.state.worldMessages.map((message, index) => {
+                          const className = classes('message', message.kind);
+                          return (
+                            <li class="message.guid" className={ className } key={ index }>
+                              { message.text }
+                            </li>
+                          );
+                        }) }
+                      </ul>
+
+                      <form onSubmit={ this._onSubmitWorld }>
+                        <input type="text" onChange={ this._onChangeWorld }
+                               name="text" value={ this.state.worldText } />
+                      </form>
+                </TabPanel>
+            </Tabs>
+        </chat>
     );
   }
 
diff --git a/src/components/game/chat/index.styl b/src/components/game/chat/index.styl
index aa9217f..6e99b0c 100644
--- a/src/components/game/chat/index.styl
+++ b/src/components/game/chat/index.styl
@@ -37,3 +37,7 @@ wowser .chat
 
     input
       width: 100%
+
+  .ReactTabs__TabList
+    height: auto;
+    overflow: hidden;
diff --git a/src/lib/game/chat/handler.js b/src/lib/game/chat/handler.js
index e076acc..eda19e2 100644
--- a/src/lib/game/chat/handler.js
+++ b/src/lib/game/chat/handler.js
@@ -6,29 +6,88 @@ import GameOpcode from '../opcode';
 
 class ChatHandler extends EventEmitter {
 
+    static CHAT_MSG_ADDON                  = 0xFFFFFFFF;
+    static CHAT_MSG_SYSTEM                 = 0x00;
+    static CHAT_MSG_SAY                    = 0x01;
+    static CHAT_MSG_PARTY                  = 0x02;
+    static CHAT_MSG_RAID                   = 0x03;
+    static CHAT_MSG_GUILD                  = 0x04;
+    static CHAT_MSG_OFFICER                = 0x05;
+    static CHAT_MSG_YELL                   = 0x06;
+    static CHAT_MSG_WHISPER                = 0x07;
+    static CHAT_MSG_WHISPER_FOREIGN        = 0x08;
+    static CHAT_MSG_WHISPER_INFORM         = 0x09;
+    static CHAT_MSG_EMOTE                  = 0x0A;
+    static CHAT_MSG_TEXT_EMOTE             = 0x0B;
+    static CHAT_MSG_MONSTER_SAY            = 0x0C;
+    static CHAT_MSG_MONSTER_PARTY          = 0x0D;
+    static CHAT_MSG_MONSTER_YELL           = 0x0E;
+    static CHAT_MSG_MONSTER_WHISPER        = 0x0F;
+    static CHAT_MSG_MONSTER_EMOTE          = 0x10;
+    static CHAT_MSG_CHANNEL                = 0x11;
+    static CHAT_MSG_CHANNEL_JOIN           = 0x12;
+    static CHAT_MSG_CHANNEL_LEAVE          = 0x13;
+    static CHAT_MSG_CHANNEL_LIST           = 0x14;
+    static CHAT_MSG_CHANNEL_NOTICE         = 0x15;
+    static CHAT_MSG_CHANNEL_NOTICE_USER    = 0x16;
+    static CHAT_MSG_AFK                    = 0x17;
+    static CHAT_MSG_DND                    = 0x18;
+    static CHAT_MSG_IGNORED                = 0x19;
+    static CHAT_MSG_SKILL                  = 0x1A;
+    static CHAT_MSG_LOOT                   = 0x1B;
+    static CHAT_MSG_MONEY                  = 0x1C;
+    static CHAT_MSG_OPENING                = 0x1D;
+    static CHAT_MSG_TRADESKILLS            = 0x1E;
+    static CHAT_MSG_PET_INFO               = 0x1F;
+    static CHAT_MSG_COMBAT_MISC_INFO       = 0x20;
+    static CHAT_MSG_COMBAT_XP_GAIN         = 0x21;
+    static CHAT_MSG_COMBAT_HONOR_GAIN      = 0x22;
+    static CHAT_MSG_COMBAT_FACTION_CHANGE  = 0x23;
+    static CHAT_MSG_BG_SYSTEM_NEUTRAL      = 0x24;
+    static CHAT_MSG_BG_SYSTEM_ALLIANCE     = 0x25;
+    static CHAT_MSG_BG_SYSTEM_HORDE        = 0x26;
+    static CHAT_MSG_RAID_LEADER            = 0x27;
+    static CHAT_MSG_RAID_WARNING           = 0x28;
+    static CHAT_MSG_RAID_BOSS_EMOTE        = 0x29;
+    static CHAT_MSG_RAID_BOSS_WHISPER      = 0x2A;
+    static CHAT_MSG_FILTERED               = 0x2B;
+    static CHAT_MSG_BATTLEGROUND           = 0x2C;
+    static CHAT_MSG_BATTLEGROUND_LEADER    = 0x2D;
+    static CHAT_MSG_RESTRICTED             = 0x2E;
+    static CHAT_MSG_BATTLENET              = 0x2F;
+    static CHAT_MSG_ACHIEVEMENT            = 0x30;
+    static CHAT_MSG_GUILD_ACHIEVEMENT      = 0x31;
+    static CHAT_MSG_ARENA_POINTS           = 0x32;
+    static CHAT_MSG_PARTY_LEADER           = 0x33;
+
   // Creates a new chat handler
   constructor(session) {
     super();
 
     // Holds session
     this.session = session;
+    
+    // [guid] = name
+    this.playerNames = [];
+
+    this.playerNames[0] = { name : "SYSTEM" };
 
     // Holds messages
-    this.messages = [
-      new Message('system', 'Welcome to Wowser!'),
-      new Message('system', 'This is a very alpha-ish build.'),
-
-      new Message('info', 'This is an info message'),
-      new Message('error', 'This is an error message'),
-      new Message('area', 'Player: This is a message emitted nearby'),
-      new Message('channel', '[Trade]: This is a channel message'),
-      new Message('whisper outgoing', 'To Someone: This is an outgoing whisper'),
-      new Message('whisper incoming', 'Someone: This is an incoming whisper'),
-      new Message('guild', '[Guild] Someone: This is a guild message')
+    this.sayMessages = [
+      new Message('system', 'This is a very alpha-ish build.',0),
+
+      new Message('info', 'This is an info message',0),
+      new Message('error', 'This is an error message',0),
+      new Message('area', 'Player: This is a message emitted nearby',0),
+      new Message('channel', '[Trade]: This is a channel message',0),
+      new Message('whisper outgoing', 'To Someone: This is an outgoing whisper',0),
+      new Message('whisper incoming', 'Someone: This is an incoming whisper',0),
+      new Message('guild', '[Guild] Someone: This is a guild message',0)
     ];
 
     // Listen for messages
     this.session.game.on('packet:receive:SMSG_MESSAGE_CHAT', ::this.handleMessage);
+    this.session.game.on('packet:receive:SMSG_NAME_QUERY_RESPONSE', ::this.handleName);
   }
 
   // Creates chat message
@@ -37,15 +96,49 @@ class ChatHandler extends EventEmitter {
   }
 
   // Sends given message
-  send(_message) {
+  send(_message,type) {
     const app = new GamePacket(GameOpcode.CMSG_MESSAGE_CHAT, 64+_message.length);
     app.writeUnsignedInt(1); // type , 1: say [TODO: select channel ]
-    app.writeUnsignedInt(1); // lang , 0: universal [TODO: use race specific ]
+    app.writeUnsignedInt(0); // lang , 0: universal [TODO: use race specific ]
     app.writeString(_message);
 
     this.session.game.send(app);
     return true;
   }
+  
+  handleName(gp) {
+    //const guid = gp.readUnsignedByte();
+    //const name_known = gp.readUnsignedByte();
+    const unk  = gp.readUnsignedByte();
+    const guid = gp.readUnsignedByte();
+    const name = gp.readString();
+    
+    // the buffer is empty now o_O
+    /*
+    const realm_name = gp.readUnsignedByte(); // only for crossrealm
+    const race = gp.readUnsignedByte();
+    const gender = gp.readUnsignedByte(); // guid2
+    const playerClass = gp.readUnsignedByte();
+    const declined = gp.readUnsignedByte();
+    */
+    
+    this.playerNames[guid] = {
+        name : name
+        //race : race,
+        //gender : gender,
+        //playerClass : playerClass
+    };
+    
+    this.emit("message",null); // to refresh
+  }
+  
+  askName(guid) {
+    const app = new GamePacket(GameOpcode.CMSG_NAME_QUERY, 64);
+    app.writeGUID(guid);
+
+    this.session.game.send(app);
+    return true;
+  }
 
   // Message handler (SMSG_MESSAGE_CHAT)
   handleMessage(gp) {
@@ -57,12 +150,20 @@ class ChatHandler extends EventEmitter {
     const len = gp.readUnsignedInt();
     const text = gp.readString(len);
     const flags = gp.readUnsignedByte(); // flags
-
-    const message = new Message();
-    message.text = text;
-    message.guid = guid1;
-
-    this.messages.push(message);
+    
+    if (!this.playerNames[guid1.low]) {    
+        this.playerNames[guid2.low]= { name: guid1.low };
+        this.askName(guid1);
+    }
+
+    if (!this.playerNames[guid2.low]) {
+        this.playerNames[guid2.low]= { name: guid2.low };
+        this.askName(guid2);
+    }
+
+    const message = new Message("area", text, guid1.low);
+    
+    this.sayMessages.push(message);
 
     this.emit('message', message);
   }
diff --git a/src/lib/game/chat/message.js b/src/lib/game/chat/message.js
index 532257a..0d62fe2 100644
--- a/src/lib/game/chat/message.js
+++ b/src/lib/game/chat/message.js
@@ -1,14 +1,16 @@
 class ChatMessage {
 
   // Creates a new message
-  constructor(kind, text) {
+  constructor(kind, text, guid1, guid2) {
     this.kind = kind;
     this.text = text;
+    this.guid1 = guid1;
+    this.guid2 = guid2;
     this.timestamp = new Date();
   }
 
   // Short string representation of this message
-  toString() {
+  toString() {   
     return `[Message; Text: ${this.text}; GUID: ${this.guid}]`;
   }
 
diff --git a/src/lib/game/opcode.js b/src/lib/game/opcode.js
index 260a890..d8cd46d 100644
--- a/src/lib/game/opcode.js
+++ b/src/lib/game/opcode.js
@@ -9,6 +9,9 @@ class GameOpcode {
   static SMSG_CHARACTER_LOGIN_FAILED        = 0x0041;
   static SMSG_LOGIN_SETTIMESPEED            = 0x0042;
 
+  static CMSG_NAME_QUERY                    = 0x0050;
+  static SMSG_NAME_QUERY_RESPONSE           = 0x0051;
+
   static SMSG_CONTACT_LIST                  = 0x0067;
 
   static CMSG_MESSAGE_CHAT                  = 0x0095;
-- 
2.43.0

